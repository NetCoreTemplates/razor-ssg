@page "/podcasts/year/{year}"
@using MyApp.Pages.Posts
@using MyApp.Pages.Shared
@model YearModel
@inject MarkdownPodcasts Podcasts

@implements IRenderStatic<YearModel>
@functions {
    public List<YearModel> GetStaticProps(RenderContext ctx) => ctx.Resolve<MarkdownPodcasts>()
        .VisibleEpisodes.Select(x => x.Date.GetValueOrDefault().Year).Distinct().Map(x => new YearModel { Year = x });
}

@{
    Layout = "_LayoutPodcast";
    ViewData["Title"] = $"{Model.Year} podcast episodes";
    var allYears = Podcasts.VisibleEpisodes.Select(x => x.Date.Value.Year).Distinct().OrderByDescending(x => x);
}

<div class="pb-12 pt-16 sm:pb-4 lg:pt-12">
    <div class="lg:px-8">
        <div class="lg:max-w-4xl">
            <div class="mx-auto px-4 sm:px-6 md:max-w-2xl md:px-4 lg:px-0">
                <h1 class="text-2xl font-bold leading-7 text-slate-900 dark:text-slate-50">
                    Episodes
                </h1>
            </div>
        </div>
    </div>

    <div class="divide-y divide-slate-100 dark:divide-slate-800 sm:mt-4 lg:mt-8 lg:border-t lg:border-slate-100 dark:lg:border-slate-800">

        <div class="my-4 relative mx-auto max-w-7xl">
            <div class="flex flex-wrap justify-center">
            @foreach (var year in allYears)
            {
                if (Model.Year == year)
                {
                    <b class="ml-3 text-sm font-semibold">@year</b>
                }
                else
                {
                    <a class="ml-3 text-sm text-indigo-700 dark:text-indigo-200 font-semibold hover:underline" href="@Podcasts.GetYearLink(year)">@year</a>
                }
            }
            </div>
        </div>

        @await Html.PartialAsync(nameof(PodcastEpisodes), 
            new PodcastEpisodes { Episodes = Podcasts.GetEpisodes(year:Model.Year) })
    </div>
</div>