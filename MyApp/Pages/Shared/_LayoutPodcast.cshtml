@inherits Microsoft.AspNetCore.Mvc.Razor.RazorPage<TModel>
@inject AppConfig AppConfig
@inject MarkdownPodcasts Podcasts
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" type="image/svg" href="img/logo.svg">
    <link rel="alternate" type="application/rss+xml" title="RSS" href="@AppConfig.PublicBaseUrl.CombineWith("feed.xml")" />
    <title>@ViewData["Title"] - ServiceStack</title>
    <base href="@(RazorSsg.GetBaseHref() ?? "/")" />
    <script>
    if (location.search === "?dark") localStorage.setItem('color-scheme','dark') 
    if (location.search === "?light") localStorage.removeItem('color-scheme') 
    const cls = document.querySelector('html').classList
    if (localStorage.getItem('color-scheme') === 'dark')
        cls.add('dark')
    else
        cls.remove('dark')
    </script>
    <link rel="stylesheet" href="css/app.css">

    @Html.ImportMap(new() {
        ["app.mjs"]              = ("./mjs/app.mjs",                     "./mjs/app.mjs"),
        ["dtos.mjs"]             = ("./mjs/dtos.mjs",                    "./mjs/dtos.mjs"),
        ["vue"]                  = ("./lib/mjs/vue.mjs",                 "./lib/mjs/vue.min.mjs"),
        ["@servicestack/client"] = ("./lib/mjs/servicestack-client.mjs", "./lib/mjs/servicestack-client.min.mjs"),
        ["@servicestack/vue"]    = ("./lib/mjs/servicestack-vue.mjs",    "./lib/mjs/servicestack-vue.min.mjs"),
    })
    @await RenderSectionAsync("head", required: false)
</head>
<body class="bg-white dark:bg-black dark:text-white">
@await Html.PartialAsync("Header")

@{
    var r = new Random();
    void AboutSection(string? cls = null)
    {
        <section class="@cls">
            <h2 class="flex items-center font-mono text-sm font-medium leading-7 text-slate-900 dark:text-slate-50">
                @{ TinyWaveFormIcon(["fill-violet-300", "fill-pink-300"], "h-2.5 w-2.5"); }
                <span class="ml-2.5">About</span>
            </h2>
            <p class="mt-2 text-base leading-7 text-slate-700 dark:text-slate-200">
                @Html.Raw(Podcasts.Config.About)
            </p>
        </section>
    }

    void TinyWaveFormIcon(string[] colors, string? cls = null)
    {
        <svg aria-hidden="true" viewBox="0 0 10 10" class="@cls">
            <path d="M0 5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V5Z"
                  class="@colors[0]" />
            <path d="M6 1a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V1Z"
                  class="@colors[1]" />
        </svg>
    }

    void Waveform(string? cls = null)
    {
        var id = "waveform-" + r.Next(1000);
        var total = 100;
        var width = 2;
        var gap = 2;
        var minHeight = 40;
        var maxHeight = 80;
        <svg aria-hidden="true" class="@cls">
            <defs>
                <linearGradient id="@id-fade" x1="0" x2="0" y1="0" y2="1">
                    <stop offset="40%" stop-color="white"></stop>
                    <stop offset="100%" stop-color="black"></stop>
                </linearGradient>
                <linearGradient id="@id-gradient">
                    <stop offset="0%" stop-color="#4989E8"></stop>
                    <stop offset="50%" stop-color="#6159DA"></stop>
                    <stop offset="100%" stop-color="#FF54AD"></stop>
                </linearGradient>
                <mask id="@id-mask">
                    <rect width="100%" height="100%" fill="url(#@id-pattern)"></rect>
                </mask>
                <pattern id="@id-pattern"
                         width="@(total * width + total * gap)"
                         height="100%"
                         patternUnits="userSpaceOnUse">
                    @for (var i = 0; i < total; i++)
                    {
                    <rect width="@width"
                          height="@r.Next(minHeight, maxHeight)"
                          x="@(gap * (i + 1) + width * i)"
                          fill="url(#@id-fade)"></rect>
                    }
                </pattern>
            </defs>
            <rect width="100%" height="100%" fill="url(#@id-gradient)" mask="url(#@id-mask)" opacity="0.25"></rect>
        </svg>
    }
}

<div class="min-h-screen">
    <main role="main" class="pt-14">
        <div>
            <div class="bg-slate-50 dark:bg-slate-900 lg:fixed lg:inset-y-0 lg:left-0 lg:flex lg:w-112 lg:items-start lg:overflow-y-auto xl:w-120">
                <div class="relative z-10 mx-auto px-4 pb-4 pt-24 sm:px-6 md:max-w-2xl md:px-4 lg:min-h-full lg:flex-auto lg:border-x lg:border-slate-200 dark:border-slate-700 lg:px-8 xl:px-10">
                    <a href="/podcasts"
                       class="relative mx-auto block w-48 overflow-hidden rounded-lg bg-slate-200 dark:bg-slate-700 shadow-xl shadow-slate-200 dark:shadow-slate-700 sm:w-64 sm:rounded-xl lg:w-auto lg:rounded-2xl"
                       aria-label="Homepage">
                        <img class="w-full"
                             src="@Podcasts.Config.ImageUrl"
                             alt=""
                             sizes="(min-width: 1024px) 20rem, (min-width: 640px) 16rem, 12rem"
                             priority>
                        <div class="absolute inset-0 rounded-lg ring-1 ring-inset ring-black/10 sm:rounded-xl lg:rounded-2xl"></div>
                    </a>
                    <div class="mt-10 text-center lg:mt-12 lg:text-left">
                        <p class="text-xl font-bold text-slate-900 dark:text-slate-50">
                            <a href="/podcasts">@Podcasts.Config.Title</a>
                        </p>
                        <p class="mt-3 text-lg font-medium leading-8 text-slate-700 dark:text-slate-200">
                            @Podcasts.Config.Description
                        </p>
                    </div>
                    @{ AboutSection("mt-12 hidden lg:block"); }
                    <section class="mt-10 lg:mt-12">
                        <h2 class="sr-only flex items-center font-mono text-sm font-medium leading-7 text-slate-900 dark:text-slate-50 lg:not-sr-only">
                            @{ TinyWaveFormIcon(["fill-indigo-300", "fill-blue-300"], "h-2.5 w-2.5"); }
                            <span class="ml-2.5">Listen</span>
                        </h2>
                        <div class="h-px bg-gradient-to-r from-slate-200/0 via-slate-200 to-slate-200/0 lg:hidden"></div>
                        <ul role="list" class="mt-4 flex justify-center gap-10 text-base font-medium leading-7 text-slate-700 dark:text-slate-200 sm:gap-8 lg:flex-col lg:gap-4">
                            @foreach (var item in Podcasts.Config.ListenLinks)
                            {
                                <li>
                                    <a href="@item.Href" class="group flex items-center">
                                        @Html.Raw(item.Svg)
                                        <span class="hidden sm:ml-3 sm:block">@item.Label</span>
                                    </a>
                                </li>
                            }
                        </ul>
                    </section>
                </div>
            </div>
            <div class="border-t border-slate-200 dark:border-slate-700 lg:relative lg:mb-28 lg:ml-112 lg:border-t-0 xl:ml-120">
                @{ Waveform("absolute left-0 top-0 h-20 w-full"); }
                <div class="relative">
                    @RenderBody()
                </div>
            </div>
            <footer class="border-t border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-900 py-10 pb-40 sm:py-16 sm:pb-32 lg:hidden">
                <div class="mx-auto px-4 sm:px-6 md:max-w-2xl md:px-4">
                    @{ AboutSection("mt-12 hidden lg:block"); }
                </div>
            </footer>
            <div class="fixed inset-x-0 bottom-0 z-10 lg:left-112 xl:left-120">
                <div id="audioPlayer"></div>
            </div>
        </div>
    </main>
</div>

<script type="module">
import AudioPlayer from "./pages/podcasts/AudioPlayer.mjs"
import { init, mount, unmount } from "app.mjs"
import {EventBus} from "@@servicestack/client"
init()

const audioPlayer = document.getElementById('audioPlayer')

let lastEpisode = null
let lastApp = null

const bus = new EventBus()

globalThis.toggleEpisode = function (episode,source="layout") {
    if (!lastEpisode || episode.url !== lastEpisode?.src) {
        unmount(audioPlayer)
        lastEpisode = { id:episode.slug, title:episode.title, src:episode.url, autoPlay:true, bus}
        lastApp = mount(audioPlayer, AudioPlayer, lastEpisode)
        return true
    } else {
       bus.publish('toggleAudioPlayer')
       return !audioPlayer.querySelector('audio')?.paused
    }
}
</script>

@await RenderSectionAsync("Scripts", required: false)

</body>
</html>