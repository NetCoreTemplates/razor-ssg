@page "/creatorkit/{Slug}"
@model MyApp.Page
@inject MarkdownPages Markdown

@implements IRenderStatic<MyApp.Page>
@functions {
    public List<Page> GetStaticProps(RenderContext ctx)
    {
        var markdown = ctx.Resolve<MarkdownPages>();
        return markdown.GetVisiblePages("creatorkit").Map(page => new Page { Slug = page.Slug.RightPart('/') });
    }
}

@{
    var doc = Markdown.GetBySlug("creatorkit/" + Model.Slug);
    if (doc == null)
    {
        Response.Redirect("/404");
        return;
    }
    if (doc.Layout != null) 
        Layout = doc.Layout == "none"
            ? null
            : doc.Layout;
    ViewData["Title"] = doc.Title;
    var allPages = Markdown.GetVisiblePages("creatorkit");
    var allGroups = allPages.Select(x => x.Group).Distinct();
}

<link rel="stylesheet" href="css/typography.css">
<div class="flex flex-wrap">
    <div class="max-w-xs p-8 flex flex-1">
        <nav class="flex flex-1 flex-col" aria-label="Sidebar">
            <a href="creatorkit/" class="block flex items-center">
                <svg class="h-6 w-6 shrink-0 text-sky-500" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" d="M2.25 12l8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25"></path></svg>
                <span class="p-2 pl-3 font-display font-medium text-slate-900 dark:text-white">Creator Kit</span>
            </a>
            @foreach (var group in allGroups)
            {
                if (group != null)
                {
                    <h2 class="font-display font-medium text-slate-900 dark:text-white">@group</h2>
                }

                <ul role="list" class="mb-6 mt-2 ml-3 space-y-2 border-l-2 border-slate-100 dark:border-slate-800 lg:mt-4 lg:space-y-4 lg:border-slate-200">
                    @foreach (var page in allPages.Where(x => x.Group == group).OrderBy(x => x.Order))
                    {
                        <li class="relative">
                            <!-- Current: "bg-gray-50 text-indigo-600", Default: "text-gray-700 hover:text-indigo-600 hover:bg-gray-50" -->
                            <a href="@(page.Slug)" class="@Html.ClassNames("block w-full pl-3.5 before:pointer-events-none before:absolute before:-left-1 before:top-1/2 before:h-1.5 before:w-1.5 before:-translate-y-1/2 before:rounded-full", 
                                  Html.MatchesPath("/" + page.Slug) 
                                      ? "font-semibold text-sky-500 before:bg-sky-500" 
                                      : "text-slate-500 before:hidden before:bg-slate-300 hover:text-slate-600 hover:before:block dark:text-slate-400 dark:before:bg-slate-700 dark:hover:text-slate-300")">
                                @(page.Title)
                            </a>
                        </li>
                    }
                </ul>
            }
        </nav>
    </div>
    <div>
        <section class="flex-col md:flex-row flex justify-center mt-16 mb-16 md:mb-12">
            <h1 class="text-4xl tracking-tight font-extrabold text-gray-900 dark:text-gray-50 sm:text-5xl md:text-6xl">
                @doc.Title
            </h1>
        </section>
        <div class="mx-auto">
            <div class="mx-auto prose lg:prose-xl mb-24">
                @Html.Raw(doc.Preview)
                <div class="not-prose my-20">@await Html.PartialAsync("PagingNav", doc)</div>
            </div>
        </div>
    </div>
</div>
    
@await Html.PartialAsync("HighlightIncludes")
<script>hljs.highlightAll()</script>